v1 <- c(1,3,3)
v2 <- c(0,1,-1)
v3 <- c(1,1,1)
X = matrix(c(v1, v2, v3), nrow = 3, ncol = 3)
X
Xt = t(X)
X1 = Xt %*% X
X2 = solve(X1)
X3 = X2 %*% Xt
y = matrix(c(-1,1,1), nrow = 3, ncol = 1)
beta = X3 %*% y
beta
v1 <- c(.7, .1, .9, .6)
v2 <- c(1, .7, .3, .1)
v3 <- c(1,1,1,1)
X = matrix(c(v1, v2, v3), nrow = 4, ncol = 3)
X
Xt = t(X)
X1 = Xt %*% X
X2 = solve(X1)
X3 = X2 %*% Xt
y = matrix(c(1,1,-1,-1), nrow = 4, ncol = 1)
beta = X3 %*% y
beta
v1 <- c(1,3,3)
X = matrix(c(v1, v2, v3), nrow = 3, ncol = 3)
X
Xt = t(X)
X1 = Xt %*% X
X2 = solve(X1)
X3 = X2 %*% Xt
y = matrix(c(-1,1,1), nrow = 3, ncol = 1)
beta = X3 %*% y
beta
X3 = X2 %*% Xt
y = matrix(c(-1,1,1), nrow = 3, ncol = 1)
beta = X3 %*% y
v1 <- c(1,3,3)
v2 <- c(0,1,-1)
v3 <- c(1,1,1)
X = matrix(c(v1, v2, v3), nrow = 3, ncol = 3)
X
Xt = t(X)
X1 = Xt %*% X
X2 = solve(X1)
X3 = X2 %*% Xt
y = matrix(c(-1,1,1), nrow = 3, ncol = 1)
beta = X3 %*% y
beta
v1 <- c(1,2)
v2 <- c(1,2)
v3 <- c(1,1)
X = matrix(c(v1, v2, v3), nrow = 3, ncol = 2)
X
Xt = t(X)
X1 = Xt %*% X
X2 = solve(X1)
X3 = X2 %*% Xt
y = matrix(c(1,-1), nrow = 2, ncol = 1)
beta = X3 %*% y
beta
v1 <- c(1,0,1) # this is a vector of feature 1
v2 <- c(3,1,1) # vector of feature 2
v3 <- c(3,-1,1)
X = matrix(c(v1, v2, v3), nrow = 3, ncol = 3)
X
Xt = t(X)
X1 = Xt %*% X
X2 = solve(X1)
X3 = X2 %*% Xt
y = matrix(c(-1,1,1), nrow = 3, ncol = 1)
beta = X3 %*% y
beta
v1 <- c(3,5) # this is a vector of feature 1
v2 <- c(5,9) # vector of feature 2
X = matrix(c(v1, v2), nrow = 2, ncol = 2)
X
Xt = t(X)
X1 = Xt %*% X
X2 = solve(X1)
X3 = X2 %*% Xt
y = matrix(c(-1,1), nrow = 2, ncol = 1)
beta = X3 %*% y
beta
install.packages("scatterplot3d")
library(scatterplot3d)
x <- c(1,1,1)
y <- c(2,2,1)
support_vectors <- list(x, y)
classes <- c(-1, 1)
# step 2: transform vectors (same dimensions but transformed)
# transformation functions can be anything
# that said, stick with functions that can exploit "kernel tricks"
# kernel tricks allow you to calculate similarities in higher dimensional space
# without incurring the computational costs to get there!
# the following is a made up transformation function
# no kernel trick is used
transform <- function(input){
if (sqrt(input[1]^2 + input[2]^2) <= 2){
output <- input
}
else{
output <- c(4 - input[2] + abs(input[1] - input[2]), 4 - input[1] + abs(input[1] - input[2]), 1)
}
output
}
# iteratively apply transformation function to list of SVs
support_vectors <- lapply(support_vectors, transform)
support_vectors
unlist(support_vectors)
matrix(unlist(support_vectors), nrow = length(support_vectors)
matrix(unlist(support_vectors), nrow = length(support_vectors))
matrix(unlist(support_vectors), nrow = length(support_vectors))
as.data.frame(matrix(unlist(support_vectors), nrow = length(support_vectors)))
matrix(unlist(support_vectors), nrow = length(support_vectors))
unlist(support_vectors)
support_vectors
unlist(support_vectors)
unlist(support_vectors)
matrix(unlist(support_vectors), nrow = length(support_vectors))
matrix(unlist(support_vectors), nrow = length(support_vectors), byrow = TRUE)
as.data.frame(matrix(unlist(support_vectors), nrow = length(support_vectors), byrow = TRUE))
support_vectors
as.data.frame(matrix(unlist(support_vectors), nrow = length(support_vectors), byrow = TRUE))
x1 <- c(1,4,5,7,2,4,9,1,3,4)
x2 <- c(5,6,1,8,9,3,0,1,4,5)
support_vectors <- list(x1, x2)
sv1 <- list(x1, x2)
sv2 <- lapply(sv1, transform)
sv2
sv1 <- list(x1, x2)
sv1 <- list(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
sv1
x1 <- c(1,4)
x2 <- c(5,6)
x3 <- c(4,1)
x4 <- c(9,3)
x5 <- c(3,7)
x6 <- c(8,8)
x7 <- c(9,1)
x8 <- c(3,5)
x9 <- c(1,7)
x10 <- c(7,7)
sv1 <- list(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
sv1
sv2 <- lapply(sv1, transform)
sv2
library(scatterplot3d)
sv2
sv3 <- as.data.frame(matrix(unlist(support_vectors), nrow = length(sv2), byrow = TRUE))
sv3
sv2
sv3 <- as.data.frame(matrix(unlist(support_vectors), nrow = length(sv2), byrow = TRUE))
sv3
sv2
sv3 <- as.data.frame(matrix(unlist(sv2), nrow = length(sv2), byrow = TRUE))
sv3
with(sv3, {scatterplot3d(V1, V2, V3)})
transform <- function(input){
if (sqrt(input[1]^2 + input[2]^2) <= 2){
output <- input
}
else {
output <- c(4 - input[2] + abs(input[1] - input[2]), 4 - input[1] + abs(input[1] - input[2]), 1)
}
output
}
sv3
a <- c(-5)
b <- c(-3)
c <- c(1)
d <- c(2)
e <- c(3)
support_vectors <- list(a,b,c,d,e)
classes <- c(-1,-1,1,1,-1)
transform <- function(input){
output <- c(input[1], input[1]^2)
output
}
support_vectors_t <- lapply(support_vectors, transform)
support_vectors_t
sv_1 <- list(a,b,c,d,e)
sv_2 <- lapply(sv_1, transform)
sv_2
sv_3 <- as.data.frame(matrix(unlist(sv2), nrow = length(sv2), byrow = TRUE))
sv_3 <- as.data.frame(matrix(unlist(sv_2), nrow = length(sv_2), byrow = TRUE))
sv_3
plot(sv_3)
n <- length(sv_2)
temp_matrix <- c()
for (i in 1:n){
for (j in 1:n){
dot_product <- sv_2[[j]] %*% sv_2[[i]]
temp_matrix <- c(temp_matrix, dot_product)
}
}
feature_matrix <- matrix(temp_matrix, nrow=n, ncol = n)
X <- feature_matrix
Xt <- t(X)
X1 <- Xt %*% X
X2 <- solve(X1)
X3 = X2 %*% Xt
X2 <- solve(X1)
X1 <- Xt %*% X
X2 <- solve(X1)
X1
feature_matrix
sv_1 <- list(d,e)
classes <- c(1,-1)
transform <- function(input){
output <- c(input[1], input[1]^2)
output
}
sv_2 <- lapply(sv_1, transform)
sv_2
sv_3 <- as.data.frame(matrix(unlist(sv_2), nrow = length(sv_2), byrow = TRUE))
sv_3
plot(sv_3)
n <- length(sv_2)
temp_matrix <- c()
for (i in 1:n){
for (j in 1:n){
dot_product <- sv_2[[j]] %*% sv_2[[i]]
temp_matrix <- c(temp_matrix, dot_product)
}
}
feature_matrix <- matrix(temp_matrix, nrow=n, ncol = n)
feature_matrix
X <- feature_matrix
Xt <- t(X)
X1 <- Xt %*% X
X1
X2 <- solve(X1)
X2 <- solve(X1)
X3 = X2 %*% Xt
y = matrix(classes, nrow = n, ncol = 1)
alpha = X3 %*% y
alpha_values <- as.vector(alpha)
alpha_values
a <- c(-5)
z <- c(-5)
z_transformed <- transform(z) # need to transform vector Z first!
z_transformed
calc <- c()
for (i in 1:n){
calc <- cbind(calc, alpha_values[i] * support_vectors[[i]] %*% z_transformed)
}
calc
sign(sum(calc))
z_transformed
calc <- c()
for (i in 1:n){
calc <- cbind(calc, alpha_values[i] * support_vectors[[i]] %*% z_transformed)
}
calc
calc <- c()
for (i in 1:n){
calc <- cbind(calc, alpha_values[i] * sv_2[[i]] %*% z_transformed)
}
calc
sign(sum(calc))
visualize <- rbind(a,b,c,d,e)
visualize
visualize[2] <- classes
visualize[,2] <- classes
visualize <- rbind(a,b,c,d,e)
visualize <- as.data.frame(rbind(a,b,c,d,e))
visualize[,2] <- classes
visualize <- cbind(visualize, classes)
classes <- c(-1,-1,1,1,-1)
visualize <- as.data.frame(rbind(a,b,c,d,e))
visualize <- cbind(visualize, classes)
visualize
library(ggplot2)
library(ggplot2)
p <- ggplot(visualize, aes(V1, classes))
p
p <- ggplot(visualize, aes(V1)) + geom_point()
p
p <- ggplot(visualize, aes(V1, classes) + geom_point()
p
p <- ggplot(visualize, aes(V1, classes)) + geom_point()
p
p <- ggplot(visualize, aes(V1)) + geom_point()
p
y <- rep(0,5)
y
visualize <- cbind(visualize, y, classes)
visualize
visualize <- as.data.frame(rbind(a,b,c,d,e))
y <- rep(0,5)
visualize <- cbind(visualize, y, classes)
visualize
library(ggplot2)
p <- ggplot(visualize, aes(V1)) + geom_point()
p <- ggplot(visualize, aes(V1, y)) + geom_point()
p
p <- ggplot(visualize, aes(V1, y)) + geom_point(aes(size = classes))
p
classes <- as.factor(c(-1,-1,1,1,-1))
visualize <- as.data.frame(rbind(a,b,c,d,e))
y <- rep(0,5)
visualize <- cbind(visualize, y, classes)
visualize
library(ggplot2)
p <- ggplot(visualize, aes(V1, y)) + geom_point(aes(size = classes))
p
p <- ggplot(visualize, aes(V1, y)) + geom_point(aes(color = classes))
p
data_1 <- list(a,b,c,d,e)
data_2 <- lapply(data_1, transform)
data_3 <- as.data.frame(matrix(unlist(data_2), nrow = length(data_2), byrow = TRUE))
data_3
data_3 <- cbind(data_3, classes)
p_2 <- ggplot(data_3, aes(x = V1, y = V2)) + geom_point(aes(color = classes))
p_2
sv_1 <- list(d,e)
sv_2 <- lapply(sv_1, transform)
sv_2
sv_3 <- as.data.frame(matrix(unlist(sv_2), nrow = length(sv_2), byrow = TRUE))
sv_3
sv_3
sv_2
n <- length(sv_2)
temp_matrix <- c()
for (i in 1:n){
for (j in 1:n){
dot_product <- sv_2[[j]] %*% sv_2[[i]]
temp_matrix <- c(temp_matrix, dot_product)
}
}
feature_matrix <- matrix(temp_matrix, nrow=n, ncol = n)
feature_matrix
X <- feature_matrix
Xt <- t(X)
X1 <- Xt %*% X
X2 <- solve(X1)
X3 = X2 %*% Xt
y = matrix(classes, nrow = n, ncol = 1)
alpha = X3 %*% y
alpha_values <- as.vector(alpha)
alpha_values
z <- c(-5)
z_transformed <- transform(z) # need to transform Z vector to the right dimension
z_transformed
calc <- c()
for (i in 1:n){
# n is the number of support vectors
calc <- cbind(calc, alpha_values[i] * sv_2[[i]] %*% z_transformed)
}
calc
sign(sum(calc))
z <- c(0)
z_transformed <- transform(z) # need to transform Z vector to the right dimension
z_transformed # z went from 1D vector to 2D
calc <- c()
for (i in 1:n){
# n is the number of support vectors
calc <- cbind(calc, alpha_values[i] * sv_2[[i]] %*% z_transformed)
}
calc
sign(sum(calc)) # success! a value of -5 is classified in the negative class
z <- c(1.5)
z_transformed <- transform(z) # need to transform Z vector to the right dimension
z_transformed # z went from 1D vector to 2D
calc <- c()
for (i in 1:n){
# n is the number of support vectors
calc <- cbind(calc, alpha_values[i] * sv_2[[i]] %*% z_transformed)
}
calc
sign(sum(calc)) # success! a value of -5 is classified in the negative class
a <- c(-5)
b <- c(-3)
c <- c(1)
d <- c(2)
e <- c(3)
class <- as.factor(c(-1,-1,1,1,-1))
# visualize data
visualize <- as.data.frame(rbind(a,b,c,d,e))
y <- rep(0,5)
visualize <- cbind(visualize, y, classes)
visualize
library(ggplot2)
p <- ggplot(visualize, aes(V1, y)) + geom_point(aes(color = classes))
p
visualize <- as.data.frame(rbind(a,b,c,d,e))
y <- rep(0,5)
visualize <- cbind(visualize, y, class)
visualize
library(ggplot2)
p <- ggplot(visualize, aes(V1, y)) + geom_point(aes(color = class))
p
transform <- function(input){
output <- c(input[1], input[1]^2)
output
}
data_1 <- list(a,b,c,d,e)
data_2 <- lapply(data_1, transform)
data_3 <- as.data.frame(matrix(unlist(data_2), nrow = length(data_2), byrow = TRUE))
data_3 <- cbind(data_3, classes)
data_1 <- list(a,b,c,d,e)
data_2 <- lapply(data_1, transform)
data_3 <- as.data.frame(matrix(unlist(data_2), nrow = length(data_2), byrow = TRUE))
data_3 <- cbind(data_3, classes)
p_2 <- ggplot(data_3, aes(x = V1, y = V2)) + geom_point(aes(color = classes))
p_2
data_3 <- cbind(data_3, class)
p_2 <- ggplot(data_3, aes(x = V1, y = V2)) + geom_point(aes(color = class))
p_2
sv_1 <- list(d,e)
sv_2 <- lapply(sv_1, transform)
sv_2
# step 4: create kernel matrix
n <- length(sv_2)
temp_matrix <- c()
for (i in 1:n){
for (j in 1:n){
dot_product <- sv_2[[j]] %*% sv_2[[i]]
temp_matrix <- c(temp_matrix, dot_product)
}
}
feature_matrix <- matrix(temp_matrix, nrow=n, ncol = n)
feature_matrix
X <- feature_matrix
Xt <- t(X)
X1 <- Xt %*% X
X2 <- solve(X1)
X3 = X2 %*% Xt
y = matrix(classes, nrow = n, ncol = 1)
alpha = X3 %*% y
alpha_values <- as.vector(alpha)
y = matrix(class, nrow = n, ncol = 1)
alpha = X3 %*% y
alpha_values <- as.vector(alpha)
y = matrix(class, nrow = n, ncol = 1)
sv_2
class_sv <- c(1, -1)
y = matrix(class_sv, nrow = n, ncol = 1)
alpha = X3 %*% y
alpha_values <- as.vector(alpha)
alpha_values # use these alpha values to classify!
# step 5: classify!
# let's classify point Z, which has a value of -5
# we know it should be in the "-1" class
z <- c(-5)
z_transformed <- transform(z) # need to transform Z vector to the right dimension
z_transformed # z went from 1D vector to 2D
calc <- c()
for (i in 1:n){
# n is the number of support vectors
calc <- cbind(calc, alpha_values[i] * sv_2[[i]] %*% z_transformed)
}
calc
sign(sum(calc)) # success! a value of -5 is classified in the negative class
# lets look at point 1.5
# point 1.5 should be in the positive class
z <- c(1.5)
# visually, we know it should be in the positive class
z <- c(1.5)
z_transformed <- transform(z) # need to transform Z vector to the right dimension
z_transformed # z went from 1D vector to 2D
calc <- c()
for (i in 1:n){
# n is the number of support vectors
calc <- cbind(calc, alpha_values[i] * sv_2[[i]] %*% z_transformed)
}
calc
sign(sum(calc)) # success! a value of 1.5 is classified in the positive class
